1-1 Ans:
	a+b < min(a,b)

	if a < 0 and b < 0 then a+b < min(a,b)

1-2 ans:
	a*b < min(a,b)

	if (a < 0 or b < 0)  or (0 < a,b < 1) then a*b < min(a,b)

1-3 ans:
	a____________
	|__    __    |
	   |__|  |___|
	         b

1-4 ans:
	above ans

1-5 ans:
a:
 	they may not be continous

 	eg: s = {1, 2, 5, 4, 3} T = 6
b:
  	even if sorted they many not be continous
  	eg : {1, 2 , 3 ,4} T = 6
c:
  	same as above

1-6 ans:
 	largest subset may contain more elements repeated

1-7 ans:

	function multiply(y,z)
		comment Return the product yz
		if z = 0 then return 0 else
		return (multiply(cy,intv(z/c)) + y * (z mod c)) 

	correctness:
	r = z mod c = remainder when z/c
	q = intv(z/c) = quoitent when z/c

	z = q * c + r => z/c = q + r/c 

	yz = cy  * (z/c)  == cy * (q + r/c) = cy*q + y *r = multiply(cy, intv(z/c)) + y * (z mod c)


1-8 ans:
	P(x) = an * pow(x,n) + an-1 * pow(x, n-1) + ... +a1 * x + a0

	function horner(A, x)
		p = An
		for i from n-1 to 0
			p = p*x + Ai
		return p

	correctness

	for every step p multiplied with previous

	so 
	0step
	p = An

	1n step
	p = An*x + An-1

	2rd step
	p = (An*x + An-1) * x + An-2

	p = An * pow(x,2) + An-1 * pow(x,1) + An-2
	..

	for mathematical induction
	in n-1 step 
	p = An * pow(x,n-1) + An-1 * pow(x, n-2) + .... +A(n-(n-1))

	so for n
	p = P*x + An

	p = An*pow(x,n)+ ,,, + A0
	as for every step we are multipling x p power of x for every value increases

	as An comes 1st and loop goes n times x power in An is n

1-9 ans:
	function bubblesort (A: list[1 ... n])
		var int i,j
		for i from n to 1
			for j from 1 to i-1
				if (A[j] >  A[j+1])
					swap the value of A[j] and A[j+1]
	
		loop condition: always the number with higher index
		should have highest number

		so as it intial starts with n
		it places the highest number until n-1 in n position 
		as it swaps least index with higher as soon as it find 
		loop condition not satisfied

		mathematical proof:
			suppose A = [a0, a1 ... , an]

			in first step
			it goes from 1 to n-1 and place highest at n
			..

1-26:
	





